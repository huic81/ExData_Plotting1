q()
install.packages("KernSmooth")
library(KernSmooth)
q()
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
q()
q()
install.package("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl(:R Programming")
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,,3,4)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_
my_div
bye()
q()
add2 <- function(x,y) {
x + y
}
add2(3,4)
add2(3,5)
above <- function(x, n) {
use <- x>n
x[use]
}
x<-1:20
above(x,12)
above <- function(x, n = 10) {
use <- x>n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
y<-10
f<=function(x){y<-2}
f<=function(x){y<-2}
2^2
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
swirl()
lirary(swirl)
library(swirl)
ls()
rm(list=ls())
swirl()
q()
library(swirl)
swirl()
q()
install.packages("swirl")
getwd()
packageVersion("swirl")
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
if(!file.exists("./data")) {dir.create("./data")}
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="./data/housing.csv")
house <- read.csv("./data/housing.csv")
agricultureLogical<-house$ACR==3 & house$AGS==6
agricultureLogical
which(agricultureLogical)[1:3]
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
if(!file.exists("./data")) {dir.create("./data")}
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl,destfile="./data/jeff_jpeg.jpg",mode="wb")
img <- readJPEG("./data/jeff_jpeg.jpg", native = TRUE)
img
quantile(img, probs = c(0.3, 0.8))
?download.file
if(!file.exists("./data")) {dir.create("./data")}
GDP_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
EDU_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(GDP_fileUrl,destfile="./data/GrossDomesticProduct.csv")
download.file(EDU_fileUrl,destfile="./data/Education.csv")
GDP <- read.csv("./data/GrossDomesticProduct.csv")
EDU <- read.csv("./data/Education.csv")
head(GDP,10)
head(EDU,10)
names(GDP)
names(EDU)
str(GDP)
GDP<-GDP[x!=""]
GDP<-GDP[GDP$X!="",]
str(GDP)
head(GDP)
tail(GDP)
GDP<-GDP[X!=""]
head(GDP)
head(EDU,3)
head(EDU,3)
library(dplyr)
head(EDU,3)
str(EDU)
str(GDP)
GDP <- read.csv("./data/GrossDomesticProduct.csv")
EDU <- read.csv("./data/Education.csv")
#option 2
GDP1<-GDP[GDP$X!="",]
library(dplyr)
GDP1<-rename(GDP,CountryCode = X, GDPranking = Gross.domestic.product.2012,
Long.Name = X.2, GDP = X.3)
str(GDP1)
head(GDP)
head(GDP1)
GDP1<-rename(GDP1,CountryCode = X, GDPranking = Gross.domestic.product.2012,
Long.Name = X.2, GDP = X.3)
GDP <- read.csv("./data/GrossDomesticProduct.csv")
EDU <- read.csv("./data/Education.csv")
#option 2
GDP1<-GDP[GDP$X!="",]
library(dplyr)
GDP1<-rename(GDP1,CountryCode = X, GDPranking = Gross.domestic.product.2012,
Long.Name = X.2, GDP = X.3)
head(GDP)
head(GDP1)
tail(GDP)
str(EDU)
str(GDP1)
tail(GDP1)
mergedata <- merge(GDP1, EDU, by = "CountryCode", all=TRUE)
str(mergedata)
head(mergedata)
sum(!is.na(unique(mergedata$GDPranking)))
sum(!is.na(unique(mergedata$Long.Name.X == mergedata$Long.Name.y)))
matchdata <- mergedata[mergedata$Long.Name.X == mergedata$Long.Name.y,]
if(!file.exists("./data")) {dir.create("./data")}
GDP_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
EDU_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(GDP_fileUrl,destfile="./data/GrossDomesticProduct.csv", method="curl")
download.file(EDU_fileUrl,destfile="./data/Education.csv", method="curl")
GDP <- read.csv("./data/GrossDomesticProduct.csv")
EDU <- read.csv("./data/Education.csv")
if(!file.exists("./data")) {dir.create("./data")}
GDP_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
EDU_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(GDP_fileUrl,destfile="./data/GrossDomesticProduct.csv")
download.file(EDU_fileUrl,destfile="./data/Education.csv")
GDP <- read.csv("./data/GrossDomesticProduct.csv")
EDU <- read.csv("./data/Education.csv")
gdp1 = fread("./data/GrossDomesticProduct.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
edu1 = fread("./data/Education.csv")
merge = merge(gdp, edu, by = 'CountryCode')
nrow(merge)
gdp = fread("./data/GrossDomesticProduct.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
edu = fread("./data/Education.csv")
merge = merge(gdp, edu, by = 'CountryCode')
nrow(merge)
library(dplyr)
gdp = fread("./data/GrossDomesticProduct.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
edu = fread("./data/Education.csv")
merge = merge(gdp, edu, by = 'CountryCode')
nrow(merge)
?fread
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
gdp = fread("./data/GrossDomesticProduct.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
edu = fread("./data/Education.csv")
merge = merge(gdp, edu, by = 'CountryCode')
nrow(merge)
library(data.table)
gdp = fread("./data/GrossDomesticProduct.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
edu = fread("./data/Education.csv")
merge = merge(gdp, edu, by = 'CountryCode')
nrow(merge)
if(!file.exists("./data")) {dir.create("./data")}
GDP_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
EDU_fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(GDP_fileUrl,destfile="./data/GrossDomesticProduct.csv",mode="wb")
download.file(EDU_fileUrl,destfile="./data/Education.csv",mode="wb")
gdp = fread("./data/GrossDomesticProduct.csv", skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
edu = fread("./data/Education.csv")
merge = merge(gdp, edu, by = 'CountryCode')
nrow(merge)
head(merge)
str(merge)
arrange(merge, desc(Rank))[13, Economy]
arrange(merge, desc(Rank))[13, ]
gdp = fread("./data/GrossDomesticProduct.csv", skip=4, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
tapply(merge$Rank, merge$`Income Group`, mean)
mergedata$RankGrp = cut2(mergedata$Rank, g=5)
table(mergedata$RankGrp)
merge$RankGrp = cut2(merge$Rank, g=5)
table(merge$RankGrp)
merge$RankGrp = cut2(merge$Rank, g=5)
table(merge$RankGrp, merge$`Income Group`)
head(merge)
packageVersion("swirl")
library(swirl)
packageVersion("R")
install_from_swirl("Exploratory Data Analysis")
swirl()
head(polloution)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta",lwd=4)
head(pollution)
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg,col="wheat", main="Number of Countries in Each Region")
barplot(reg,col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east, col="green")
hist(east$pm25, col="green")
hist(subbset(pollution, region=="west"), col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar =
| c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="east")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
dev.cur()
dev.off()
with(cars, plot(speed, dist))
plot(mean(cars$speed),max(cars$dist),"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state%region)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
gplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality, xlab="Month",ylab="Ozone (ppb)",col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone)
points(may$Wind, may$Ozone, bg="blue", pch=17)
points(may$Wind, may$Ozone, col="blue", pch=17)
may <- subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=c(17,8), col=c("blue","red"), legand=c("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd = 2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd("~/Git/ExData_Plotting1")
pwd
dir
# required packages
library(data.table)
library(lubridate)
setwd("C:\Users\hwee.see.teh\Documents\Git\ExData_Plotting1")
setwd("C:/Users/hwee.see.teh/Documents/Git/ExData_Plotting1")
## step 3: download zip file from website
## make data folder if not exists
if(!file.exists("./data")) {dir.create("./data")}
## download the zip file
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destfilepath <- "./data/household_power_consumption.zip"
download.file(fileUrl,destfile = destfilepath)
zipfile <- unzip(destfilepath, exdir = "./data")
rawdata <- read.table("./data/household_power_consumption.txt", header=TRUE)
head(rawdata)
str(rawdata)
rawdata <- read.table("./data/household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
head(rawdata)
str(rawdata)
rawdata#DateTime <- strptime(paste(df$Date, df$Time), format="%d/%m/%Y %H:%M:%S")
rawdata$DateTime <- strptime(paste(df$Date, df$Time), format="%d/%m/%Y %H:%M:%S")
rawdata$DateTime <- strptime(paste(rawdata$Date, rawdata$Time), format="%d/%m/%Y %H:%M:%S")
powerconsumption$DateTime <- strptime(paste(powerconsumption$Date, powerconsumption$Time), format="%d/%m/%Y %H:%M:%S")
powerconsumption <- read.table("./data/household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
head(powerconsumption)
str(powerconsumption)
powerconsumption.colClass <- c('character', 'character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
powerconsumption.data <- read.table("./data/household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?")
head(powerconsumption.data)
str(powerconsumption.data)
powerconsumption.data <- read.table("./data/household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?", colClasses = powerconsumption.colClass)
head(powerconsumption.data)
str(powerconsumption.data)
powerconsumption.data <- powerconsumption.data[powerconsumption.data$Date=='1/2/2007' | powerconsumption.data$Date=='2/2/2007',]
str(powerconsumption.data)
powerconsumption.data$DateTime <- strptime(paste(powerconsumption$Date, powerconsumption$Time), format="%d/%m/%Y %H:%M:%S")
ss
q
powerconsumption.data$DateTime <- strptime(paste(powerconsumption.data$Date, powerconsumption.data$Time), format="%d/%m/%Y %H:%M:%S")
str(powerconsumption.data)
dataColClass <- c('character', 'character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
powerconsumption <- read.table("./data/household_power_consumption.txt", header=TRUE, sep=";", na.strings = "?", colClasses = dataColClass)
str(powerconsumption)
powerconsumption <- powerconsumption[powerconsumption.data$Date=='1/2/2007' | powerconsumption$Date=='2/2/2007',]
powerconsumption <- powerconsumption[powerconsumption$Date=='1/2/2007' | powerconsumption$Date=='2/2/2007',]
str(powerconsumption)
powerconsumption <- powerconsumption[complete.cases(powerconsumption),]
str(powerconsumption)
powerconsumption$DateTime <- strptime(paste(powerconsumption$Date, powerconsumption$Time), format="%d/%m/%Y %H:%M:%S")
str(powerconsumption)
table(powerconsumption$Date)
hist(powerconsumption$Global_active_power, main="Global Active Power", xlab = "Global Active Power (kilowatts)", col="red")
png('plot1.png',width=480,height=480)
hist(powerconsumption$Global_active_power, main="Global Active Power", xlab = "Global Active Power (kilowatts)", col="red")
dev.off()
source('.data/plot1.R')
source(".data/plot1.R")
source("plot1.R")
?plot()
plot(powerconsumption$Global_active_power~powerconsumption$dateTime, type="l", xlab = "", ylab="Global Active Power (kilowatts)")
plot(powerconsumption$Global_active_power~powerconsumption$DateTime, type="l", xlab = "", ylab="Global Active Power (kilowatts)")
str(powerconsumption)
plot(powerconsumption$Global_active_power,powerconsumption$DateTime, type="l", xlab = "", ylab="Global Active Power (kilowatts)")
plot(powerconsumption$DateTime, powerconsumption$Global_active_power, type="l", xlab = "", ylab="Global Active Power (kilowatts)")
source("plot2.R")
source("plot1.R")
source("plot2.R")
with(powerconsumption, plot(Sub_metering_1~DateTime, type="line", xlab="", ylab="Global Active Power (kilowatts)"))
with(powerconsumption, lines(Sub_metering_2~DateTime, col = "red"))
with(powerconsumption, lines(Sub_metering_3~DateTime, col = "blue"))
## Add Legend
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(powerconsumption, plot(Sub_metering_1~DateTime, type="line", xlab="", ylab="Global Active Power (kilowatts)"))
with(powerconsumption, plot(DateTime, Sub_metering_1, type="line", xlab="", ylab="Energy sub metering"))
with(powerconsumption, lines(DateTime, Sub_metering_2, col = "red"))
with(powerconsumption, lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?legend()
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = "solid")
source("plot3.R")
## set fill row parameter
par(mfrow = c(2,2))
## plot top left
with(powerconsumption, plot(Datetime, Global_active_power, type="line", ylab="Global Active Power (kilowatts)", xlab=""))
with(powerconsumption, plot(Datetime, Global_active_power, type="line", ylab="Global Active Power (kilowatts)", xlab=""))
str(powerconsumption)
with(powerconsumption, plot(DateTime, Global_active_power, type="line", ylab="Global Active Power (kilowatts)", xlab=""))
## plot top right
with(powerconsumption, plot(DateTime, Voltage, type="line", ylab="Voltage", xlab="datetime"))
## plot bottom left
with(powerconsumption, plot(DateTime, Sub_metering_1, type="line", xlab="", ylab="Energy sub metering"))
with(powerconsumption, lines(DateTime, Sub_metering_2, col = "red"))
with(powerconsumption, lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = "solid")
## plot bottom right
with(powerconsumption, plot(DateTime, Global_reactive_power, type="line", ylab="Global_reactive_power", xlab="datetime"))
## set fill row parameter
par(mfrow = c(2,2))
## plot top left
with(powerconsumption, plot(DateTime, Global_active_power, type="line", ylab="Global Active Power (kilowatts)", xlab=""))
## plot top right
with(powerconsumption, plot(DateTime, Voltage, type="line", ylab="Voltage", xlab="datetime"))
## plot bottom left
with(powerconsumption, plot(DateTime, Sub_metering_1, type="line", xlab="", ylab="Energy sub metering"))
with(powerconsumption, lines(DateTime, Sub_metering_2, col = "red"))
with(powerconsumption, lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = "solid", bty = "n")
## plot bottom right
with(powerconsumption, plot(DateTime, Global_reactive_power, type="line", ylab="Global_reactive_power", xlab="datetime"))
source("plot4.R")
source("plot4.R")
